float AWGN_generator(void) {
    float temp1, temp2, result;
    int p =1;
    while(p > 0) {
        temp2 = (rand() / ((float)RAND_MAX));
        if(temp2 == 0) {
            p=1;
        } else {
            p=-1;
        }
    }
    temp1 = cosf((PDSP_2PI * rand()) / ((float)RAND_MAX));
    result = sqrtf(-2.0 * logf(temp2)) * temp1;
    return result;
}


void GEN_NOISE_InitUniform (GEN_NOISE_UniformHandle_st *hCfg, long seed, float start, float stop){
    hCfg->seed = seed;
    hCfg->start = start;
    hCfg->stop = stop;

    hCfg->a = 16807;
    hCfg->m = 2147483647;
    hCfg->q = 127773;
    hCfg->r = 2836;
}

float GEN_NOISE_GetValueUniform(GEN_NOISE_UniformHandle_st *pHandle) {
    pHandle->seed = (pHandle->a * (pHandle->seed % pHandle->q))  - (pHandle->r * (pHandle->seed / pHandle->q));
    if(pHandle->seed < 0)
        pHandle->seed += pHandle->m;
    float y  = ((float)pHandle->seed / (float)pHandle->m);
    y *= (pHandle->stop - pHandle->start);
    y += pHandle->start;
    return y;
}

void GEN_NOISE_InitNormal(GEN_NOISE_NormalHandle_st *hCfg, float mean, float stdDeviation){
    hCfg->mean = mean;
    hCfg->stdDeviation = stdDeviation;
    hCfg->call = 0;
    hCfg->X1 = 0.0;
    hCfg->X2 = 0.0;
}

float GEN_NOISE_GetValueNormal(GEN_NOISE_NormalHandle_st *pHandle) {
    float U1, U2, W, mult, y;

    if(pHandle->call == 1) {
        pHandle->call = !(pHandle->call);
        y = (pHandle->mean + pHandle->stdDeviation * pHandle->X2);

    } else {
        do {
            U1 = -1 + ((float)rand() / RAND_MAX) * 2;
            U2 = -1 + ((float)rand() / RAND_MAX) * 2;
            W = powf(U1,2) + powf(U2,2);
        } while(W>=1 || W==0);
        mult = sqrt((-2*logf(W)) / W);
        pHandle->X1 = U1* mult;
        pHandle->X2 = U2*mult;
        pHandle->call = !(pHandle->call);
        y = (pHandle->mean + pHandle->stdDeviation * pHandle->X1);
    }
    return y;
}

void GEN_NOISE_InitGalois(GEN_NOISE_GaloisHandle_st * hCfg, uint32_t seed, uint32_t key, uint8_t length){
    hCfg->key = key;
    hCfg->value = seed;
    hCfg->length = length;
}
